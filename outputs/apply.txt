PS D:\EPAM_WORK\DZ\aws\ready> terraform apply -auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.template_file.wp-template will be read during apply
  # (config refers to values not yet known)
 <= data "template_file" "wp-template"  {
      + id       = (known after apply)
      + rendered = (known after apply)
      + template = <<-EOT
            #!/bin/bash
            #sudo su - root

            wpdir=/var/www/html
            content=$wpdir/wp-content

            # AUTOMATIC WORDPRESS INSTALLER IN  AWS LINUX 2 AMI

            # install LAMP Server
            yum update -y
            #install apache server
            yum install -y httpd amazon-efs-utils

            #since amazon ami 2018 is no longer supported ,to install latest php and mysql we have to do some tricks.
            #first enable php7.xx from  amazon-linux-extra and install it

            amazon-linux-extras enable php7.4
            yum clean metadata
            yum install -y php php-{pear,cgi,common,curl,mbstring,gd,mysqlnd,gettext,bcmath,json,xml,fpm,intl,zip,imap,devel}
            #install imagick extension
            yum -y install gcc ImageMagick ImageMagick-devel ImageMagick-perl
            pecl install imagick
            chmod 755 /usr/lib64/php/modules/imagick.so
            cat <<EOF >>/etc/php.d/20-imagick.ini

            extension=imagick

            EOF

            systemctl restart php-fpm.service

            #and download mysql package to yum  and install mysql server from yum
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum localinstall -y https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
            yum install -y mysql-community-server

            sleep 1m

            # Mounting EFS
            mkdir -p $content/

            mount -t efs ${EFS_NAME}:/ $content/
            # Edit fstab so EFS automatically loads on reboot
            echo ${EFS_NAME}:/ $content efs defaults,_netdev 0 0 >> /etc/fstab

            echo "$(hostname -I)" > $wpdir/health

            systemctl start httpd
            systemctl start mysqld

            # Change OWNER and permission of directory /var/www
            usermod -a -G apache ec2-user
            chown -R ec2-user:apache /var/www
            find /var/www -type d -exec chmod 2775 {} \;
            find /var/www -type f -exec chmod 0664 {} \;

            # Download wordpress package and extract
            wget https://wordpress.org/latest.tar.gz
            tar -xzf latest.tar.gz
            cp -r wordpress/* $wpdir

            mysql -u"${DB_USER}" -p"${DB_PASSWORD}" -h "${DB_HOST}" -e "create database ${DB_NAME}";

            # AWSAuthenticationPlugin supported only for Aurora
            #mysql -u"${DB_USER}" -p"${DB_PASSWORD}" -h "${DB_HOST}" -e "CREATE USER '${DB_IAM}' IDENTIFIED WITH AWSAuthenticationPlugin as 'RDS' REQUIRE SSL";

            # Create wordpress configuration file and update database value
            cd $wpdir
            cp wp-config-sample.php wp-config.php

            sed -i "s/database_name_here/${DB_NAME}/g" wp-config.php
            sed -i "s/username_here/${DB_USER}/g" wp-config.php
            sed -i "s/password_here/${DB_PASSWORD}/g" wp-config.php
            sed -i "s/localhost/${DB_HOST}/g" wp-config.php

            cat <<EOF >>$wpdir/wp-config.php

            define('FS_METHOD', 'direct');
            define('WP_MEMORY_LIMIT', '256M');
            EOF

            # wp-cli easy way install
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            mv wp-cli.phar wp
            chmod +x wp
            ./wp core install --url="${ELB_NAME}" --title="${WP_TITLE}" --admin_user="${WP_USER}" --admin_password="${WP_PASS}" --admin_email="${WP_EMAIL}" --allow-root
            rm -rf ./wp

            # Change permission of /var/www/html/
            chown -R ec2-user:apache $wpdir
            chmod -R 774 $content

            #  enable .htaccess files in Apache config using sed command
            sed -i '/<Directory "\/var\/www\/html">/,/<\/Directory>/ s/AllowOverride None/AllowOverride all/' /etc/httpd/conf/httpd.conf

            #Make apache and mysql to autostart and restart apache
            systemctl enable  httpd.service
            systemctl enable mysqld.service
            systemctl restart httpd.service
        EOT
      + vars     = {
          + "DB_HOST"     = (known after apply)
          + "DB_IAM"      = "semen"
          + "DB_NAME"     = "wpdatabase"
          + "DB_PASSWORD" = (known after apply)
          + "DB_USER"     = "dbadmin"
          + "EFS_NAME"    = (known after apply)
          + "ELB_NAME"    = (known after apply)
          + "WP_EMAIL"    = (known after apply)
          + "WP_PASS"     = (known after apply)
          + "WP_TITLE"    = "Stream 23 AWS homework"
          + "WP_USER"     = "wpadmin"
        }
    }

  # aws_autoscaling_attachment.asg_attachment_elb will be created
  + resource "aws_autoscaling_attachment" "asg_attachment_elb" {
      + alb_target_group_arn   = (known after apply)
      + autoscaling_group_name = (known after apply)
      + id                     = (known after apply)
    }

  # aws_autoscaling_group.web_asg will be created
  + resource "aws_autoscaling_group" "web_asg" {
      + arn                       = (known after apply)
      + availability_zones        = (known after apply)
      + default_cooldown          = (known after apply)
      + desired_capacity          = 2
      + force_delete              = false
      + force_delete_warm_pool    = false
      + health_check_grace_period = 300
      + health_check_type         = "ELB"
      + id                        = (known after apply)
      + launch_configuration      = "LC-WP"
      + max_size                  = 2
      + metrics_granularity       = "1Minute"
      + min_elb_capacity          = 2
      + min_size                  = 2
      + name                      = "Wordpress-ASG"
      + name_prefix               = (known after apply)
      + protect_from_scale_in     = false
      + service_linked_role_arn   = (known after apply)
      + target_group_arns         = (known after apply)
      + vpc_zone_identifier       = (known after apply)
      + wait_for_capacity_timeout = "15m"

      + tag {
          + key                 = "Name"
          + propagate_at_launch = true
          + value               = "Wordpress-ASG"
        }
    }

  # aws_db_instance.aws_s23-mysql will be created
  + resource "aws_db_instance" "aws_s23-mysql" {
      + address                               = (known after apply)
      + allocated_storage                     = 10
      + apply_immediately                     = (known after apply)
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + backup_retention_period               = (known after apply)
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + db_subnet_group_name                  = (known after apply)
      + delete_automated_backups              = true
      + endpoint                              = (known after apply)
      + engine                                = "mysql"
      + engine_version                        = "8.0"
      + engine_version_actual                 = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = "mysqldb"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t2.micro"
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + maintenance_window                    = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + name                                  = "wpdatabase"
      + nchar_character_set_name              = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = "default.mysql8.0"
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = 3306
      + publicly_accessible                   = false
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = true
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_encrypted                     = false
      + storage_type                          = (known after apply)
      + tags                                  = {
          + "Name" = "MySQL RDS Instance"
        }
      + tags_all                              = {
          + "Name" = "MySQL RDS Instance"
        }
      + timezone                              = (known after apply)
      + username                              = "dbadmin"
      + vpc_security_group_ids                = (known after apply)
    }

  # aws_db_subnet_group.rds-subnet will be created
  + resource "aws_db_subnet_group" "rds-subnet" {
      + arn         = (known after apply)
      + description = "Managed by Terraform"
      + id          = (known after apply)
      + name        = "rds-subnet"
      + name_prefix = (known after apply)
      + subnet_ids  = (known after apply)
      + tags        = {
          + "Name" = "rds-subnet"
        }
      + tags_all    = {
          + "Name" = "rds-subnet"
        }
    }

  # aws_efs_access_point.efs_access_point will be created
  + resource "aws_efs_access_point" "efs_access_point" {
      + arn             = (known after apply)
      + file_system_arn = (known after apply)
      + file_system_id  = (known after apply)
      + id              = (known after apply)
      + owner_id        = (known after apply)
      + tags_all        = (known after apply)

      + root_directory {
          + path = (known after apply)

          + creation_info {
              + owner_gid   = (known after apply)
              + owner_uid   = (known after apply)
              + permissions = (known after apply)
            }
        }
    }

  # aws_efs_file_system.efs will be created
  + resource "aws_efs_file_system" "efs" {
      + arn                     = (known after apply)
      + availability_zone_id    = (known after apply)
      + availability_zone_name  = (known after apply)
      + creation_token          = "aws23stream-efs-token"
      + dns_name                = (known after apply)
      + encrypted               = (known after apply)
      + id                      = (known after apply)
      + kms_key_id              = (known after apply)
      + number_of_mount_targets = (known after apply)
      + owner_id                = (known after apply)
      + performance_mode        = (known after apply)
      + size_in_bytes           = (known after apply)
      + tags                    = {
          + "Name" = "EFS"
        }
      + tags_all                = {
          + "Name" = "EFS"
        }
      + throughput_mode         = "bursting"
    }

  # aws_efs_mount_target.efs_mount[0] will be created
  + resource "aws_efs_mount_target" "efs_mount" {
      + availability_zone_id   = (known after apply)
      + availability_zone_name = (known after apply)
      + dns_name               = (known after apply)
      + file_system_arn        = (known after apply)
      + file_system_id         = (known after apply)
      + id                     = (known after apply)
      + ip_address             = (known after apply)
      + mount_target_dns_name  = (known after apply)
      + network_interface_id   = (known after apply)
      + owner_id               = (known after apply)
      + security_groups        = (known after apply)
      + subnet_id              = (known after apply)
    }

  # aws_efs_mount_target.efs_mount[1] will be created
  + resource "aws_efs_mount_target" "efs_mount" {
      + availability_zone_id   = (known after apply)
      + availability_zone_name = (known after apply)
      + dns_name               = (known after apply)
      + file_system_arn        = (known after apply)
      + file_system_id         = (known after apply)
      + id                     = (known after apply)
      + ip_address             = (known after apply)
      + mount_target_dns_name  = (known after apply)
      + network_interface_id   = (known after apply)
      + owner_id               = (known after apply)
      + security_groups        = (known after apply)
      + subnet_id              = (known after apply)
    }

  # aws_iam_group.s23_group will be created
  + resource "aws_iam_group" "s23_group" {
      + arn       = (known after apply)
      + id        = (known after apply)
      + name      = "s23_users"
      + path      = "/"
      + unique_id = (known after apply)
    }

  # aws_iam_group_membership.s23_team will be created
  + resource "aws_iam_group_membership" "s23_team" {
      + group = "s23_users"
      + id    = (known after apply)
      + name  = "s23-team"
      + users = [
          + "fedor",
          + "semen",
        ]
    }

  # aws_iam_policy.ec2_policy will be created
  + resource "aws_iam_policy" "ec2_policy" {
      + arn       = (known after apply)
      + id        = (known after apply)
      + name      = "ec2_policy"
      + path      = "/"
      + policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "ec2:*"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = "elasticloadbalancing:*"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = "cloudwatch:*"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = "autoscaling:*"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action    = "iam:CreateServiceLinkedRole"
                      + Condition = {
                          + StringEquals = {
                              + iam:AWSServiceName = [
                                  + "autoscaling.amazonaws.com",
                                  + "ec2scheduled.amazonaws.com",
                                  + "elasticloadbalancing.amazonaws.com",
                                  + "spot.amazonaws.com",
                                  + "spotfleet.amazonaws.com",
                                  + "transitgateway.amazonaws.com",
                                ]
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "*"
                    },
                  + {
                      + Action   = "iam:GetAccountPasswordPolicy"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = "iam:ChangePassword"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:iam::087693861308:user/fedor"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id = (known after apply)
      + tags_all  = (known after apply)
    }

  # aws_iam_policy.rds_policy will be created
  + resource "aws_iam_policy" "rds_policy" {
      + arn       = (known after apply)
      + id        = (known after apply)
      + name      = "rds_policy"
      + path      = "/"
      + policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "rds:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:rds:eu-west-2:087693861308:db:*",
                        ]
                    },
                  + {
                      + Action   = "pi:*"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:pi:*:*:metrics/rds/*"
                    },
                  + {
                      + Action    = "iam:CreateServiceLinkedRole"
                      + Condition = {
                          + StringLike = {
                              + iam:AWSServiceName = [
                                  + "rds.amazonaws.com",
                                  + "rds.application-autoscaling.amazonaws.com",
                                ]
                            }
                        }
                      + Effect    = "Allow"
                      + Resource  = "*"
                    },
                  + {
                      + Action   = "iam:GetAccountPasswordPolicy"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = "iam:ChangePassword"
                      + Effect   = "Allow"
                      + Resource = "arn:aws:iam::087693861308:user/semen"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id = (known after apply)
      + tags_all  = (known after apply)
    }

  # aws_iam_policy_attachment.ec2_rp-attach will be created
  + resource "aws_iam_policy_attachment" "ec2_rp-attach" {
      + id         = (known after apply)
      + name       = "ec2_rp-attach"
      + policy_arn = (known after apply)
      + roles      = [
          + "ec2_role",
        ]
      + users      = [
          + "fedor",
        ]
    }

  # aws_iam_policy_attachment.rds_rp-attach will be created
  + resource "aws_iam_policy_attachment" "rds_rp-attach" {
      + id         = (known after apply)
      + name       = "rds_rp-attach"
      + policy_arn = (known after apply)
      + roles      = [
          + "rds_role",
        ]
      + users      = [
          + "semen",
        ]
    }

  # aws_iam_role.ec2_role will be created
  + resource "aws_iam_role" "ec2_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "ec2_role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # aws_iam_role.rds_role will be created
  + resource "aws_iam_role" "rds_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "rds.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "rds_role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # aws_iam_user.db_admin will be created
  + resource "aws_iam_user" "db_admin" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "semen"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user.ec2_admin will be created
  + resource "aws_iam_user" "ec2_admin" {
      + arn           = (known after apply)
      + force_destroy = false
      + id            = (known after apply)
      + name          = "fedor"
      + path          = "/"
      + tags_all      = (known after apply)
      + unique_id     = (known after apply)
    }

  # aws_iam_user_login_profile.db_profile will be created
  + resource "aws_iam_user_login_profile" "db_profile" {
      + encrypted_password      = (known after apply)
      + id                      = (known after apply)
      + key_fingerprint         = (known after apply)
      + password_length         = 20
      + password_reset_required = true
      + pgp_key                 = "keybase:maxxv"
      + user                    = "semen"
    }

  # aws_iam_user_login_profile.ec2_profile will be created
  + resource "aws_iam_user_login_profile" "ec2_profile" {
      + encrypted_password      = (known after apply)
      + id                      = (known after apply)
      + key_fingerprint         = (known after apply)
      + password_length         = 20
      + password_reset_required = true
      + pgp_key                 = "keybase:maxxv"
      + user                    = "fedor"
    }

  # aws_internet_gateway.aws_s23-gw will be created
  + resource "aws_internet_gateway" "aws_s23-gw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags_all = (known after apply)
      + vpc_id   = (known after apply)
    }

  # aws_launch_configuration.web_lc will be created
  + resource "aws_launch_configuration" "web_lc" {
      + arn                         = (known after apply)
      + associate_public_ip_address = false
      + ebs_optimized               = (known after apply)
      + enable_monitoring           = true
      + id                          = (known after apply)
      + image_id                    = "ami-029ed17b4ea379178"
      + instance_type               = "t2.micro"
      + key_name                    = (known after apply)
      + name                        = "LC-WP"
      + name_prefix                 = (known after apply)
      + security_groups             = (known after apply)
      + user_data                   = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + no_device             = (known after apply)
          + snapshot_id           = (known after apply)
          + throughput            = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + throughput            = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_lb.web_alb will be created
  + resource "aws_lb" "web_alb" {
      + arn                        = (known after apply)
      + arn_suffix                 = (known after apply)
      + desync_mitigation_mode     = "defensive"
      + dns_name                   = (known after apply)
      + drop_invalid_header_fields = false
      + enable_deletion_protection = false
      + enable_http2               = true
      + enable_waf_fail_open       = false
      + id                         = (known after apply)
      + idle_timeout               = 60
      + internal                   = false
      + ip_address_type            = (known after apply)
      + load_balancer_type         = "application"
      + name                       = "wp-alb"
      + security_groups            = (known after apply)
      + subnets                    = (known after apply)
      + tags                       = {
          + "Name" = "Wordpress-ALB"
        }
      + tags_all                   = {
          + "Name" = "Wordpress-ALB"
        }
      + vpc_id                     = (known after apply)
      + zone_id                    = (known after apply)

      + subnet_mapping {
          + allocation_id        = (known after apply)
          + ipv6_address         = (known after apply)
          + outpost_id           = (known after apply)
          + private_ipv4_address = (known after apply)
          + subnet_id            = (known after apply)
        }
    }

  # aws_lb_listener.web_ls will be created
  + resource "aws_lb_listener" "web_ls" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 80
      + protocol          = "HTTP"
      + ssl_policy        = (known after apply)
      + tags_all          = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # aws_lb_target_group.web_tg will be created
  + resource "aws_lb_target_group" "web_tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = "web-tg"
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "Wordpress-TG"
        }
      + tags_all                           = {
          + "Name" = "Wordpress-TG"
        }
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 2
          + interval            = 120
          + matcher             = "200,301,302"
          + path                = "/health"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 30
          + unhealthy_threshold = 6
        }

      + stickiness {
          + cookie_duration = (known after apply)
          + cookie_name     = (known after apply)
          + enabled         = (known after apply)
          + type            = (known after apply)
        }
    }

  # aws_main_route_table_association.aws_s23-rt-association will be created
  + resource "aws_main_route_table_association" "aws_s23-rt-association" {
      + id                      = (known after apply)
      + original_route_table_id = (known after apply)
      + route_table_id          = (known after apply)
      + vpc_id                  = (known after apply)
    }

  # aws_route_table.aws_s23-rt will be created
  + resource "aws_route_table" "aws_s23-rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "aws_s23-rt"
        }
      + tags_all         = {
          + "Name" = "aws_s23-rt"
        }
      + vpc_id           = (known after apply)
    }

  # aws_security_group.efs-sg will be created
  + resource "aws_security_group" "efs-sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = ""
              + from_port        = 2049
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 2049
            },
        ]
      + name                   = "EFS-SG"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "EFS-SG"
        }
      + tags_all               = {
          + "Name" = "EFS-SG"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.elb-sg will be created
  + resource "aws_security_group" "elb-sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "ELB-SG"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "ELB-SG"
        }
      + tags_all               = {
          + "Name" = "ELB-SG"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.rds-sg will be created
  + resource "aws_security_group" "rds-sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = ""
              + from_port        = 3306
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 3306
            },
        ]
      + name                   = "RDS-SG"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "RDS-SG"
        }
      + tags_all               = {
          + "Name" = "RDS-SG"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group.web-sg will be created
  + resource "aws_security_group" "web-sg" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = []
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "WP-SG"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "WP-SG"
        }
      + tags_all               = {
          + "Name" = "WP-SG"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.aws_s23_subnet_az[0] will be created
  + resource "aws_subnet" "aws_s23_subnet_az" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "eu-west-2a"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.1.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "subnet_az_eu-west-2a"
        }
      + tags_all                        = {
          + "Name" = "subnet_az_eu-west-2a"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_subnet.aws_s23_subnet_az[1] will be created
  + resource "aws_subnet" "aws_s23_subnet_az" {
      + arn                             = (known after apply)
      + assign_ipv6_address_on_creation = false
      + availability_zone               = "eu-west-2b"
      + availability_zone_id            = (known after apply)
      + cidr_block                      = "10.0.2.0/24"
      + id                              = (known after apply)
      + ipv6_cidr_block_association_id  = (known after apply)
      + map_public_ip_on_launch         = true
      + owner_id                        = (known after apply)
      + tags                            = {
          + "Name" = "subnet_az_eu-west-2b"
        }
      + tags_all                        = {
          + "Name" = "subnet_az_eu-west-2b"
        }
      + vpc_id                          = (known after apply)
    }

  # aws_vpc.aws_s23_vpc will be created
  + resource "aws_vpc" "aws_s23_vpc" {
      + arn                            = (known after apply)
      + cidr_block                     = "10.0.0.0/16"
      + default_network_acl_id         = (known after apply)
      + default_route_table_id         = (known after apply)
      + default_security_group_id      = (known after apply)
      + dhcp_options_id                = (known after apply)
      + enable_classiclink             = (known after apply)
      + enable_classiclink_dns_support = (known after apply)
      + enable_dns_hostnames           = true
      + enable_dns_support             = true
      + id                             = (known after apply)
      + instance_tenancy               = "default"
      + ipv6_association_id            = (known after apply)
      + ipv6_cidr_block                = (known after apply)
      + main_route_table_id            = (known after apply)
      + owner_id                       = (known after apply)
      + tags                           = {
          + "Name" = "aws_s23_vpc"
        }
      + tags_all                       = {
          + "Name" = "aws_s23_vpc"
        }
    }

  # random_string.mysql_password will be created
  + resource "random_string" "mysql_password" {
      + id          = (known after apply)
      + length      = 10
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + result      = (known after apply)
      + special     = false
      + upper       = true
    }

  # random_string.wp_password will be created
  + resource "random_string" "wp_password" {
      + id          = (known after apply)
      + length      = 10
      + lower       = true
      + min_lower   = 0
      + min_numeric = 0
      + min_special = 0
      + min_upper   = 0
      + number      = true
      + result      = (known after apply)
      + special     = false
      + upper       = true
    }

Plan: 36 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + account_id              = "087693861308"
  + db_admin-profile-creds  = (known after apply)
  + ec2_admin-profile-creds = (known after apply)
  + efs_dns_name            = (known after apply)
  + rds_address             = (known after apply)
  + rds_creds               = (known after apply)
  + wp_creds                = (known after apply)
  + wp_lb_url               = (known after apply)
random_string.mysql_password: Creating...
random_string.wp_password: Creating...
random_string.wp_password: Creation complete after 0s [id=RSBVbFrBh0]
random_string.mysql_password: Creation complete after 0s [id=ZCSV0uH5aP]
aws_iam_user.db_admin: Creating...
aws_iam_group.s23_group: Creating...
aws_iam_role.ec2_role: Creating...
aws_iam_user.ec2_admin: Creating...
aws_iam_role.rds_role: Creating...
aws_efs_file_system.efs: Creating...
aws_vpc.aws_s23_vpc: Creating...
aws_iam_group.s23_group: Creation complete after 1s [id=s23_users]
aws_iam_user.db_admin: Creation complete after 1s [id=semen]
aws_iam_user.ec2_admin: Creation complete after 1s [id=fedor]
aws_iam_user_login_profile.db_profile: Creating...
aws_iam_user_login_profile.ec2_profile: Creating...
aws_iam_policy.rds_policy: Creating...
aws_iam_group_membership.s23_team: Creating...
aws_iam_policy.ec2_policy: Creating...
aws_iam_user_login_profile.ec2_profile: Creation complete after 1s [id=fedor]
aws_iam_user_login_profile.db_profile: Creation complete after 1s [id=semen]
aws_iam_role.rds_role: Creation complete after 2s [id=rds_role]
aws_iam_role.ec2_role: Creation complete after 2s [id=ec2_role]
aws_iam_group_membership.s23_team: Creation complete after 1s [id=s23-team]
aws_iam_policy.ec2_policy: Creation complete after 1s [id=arn:aws:iam::087693861308:policy/ec2_policy]
aws_iam_policy.rds_policy: Creation complete after 1s [id=arn:aws:iam::087693861308:policy/rds_policy]
aws_iam_policy_attachment.ec2_rp-attach: Creating...
aws_iam_policy_attachment.rds_rp-attach: Creating...
aws_iam_policy_attachment.rds_rp-attach: Creation complete after 2s [id=rds_rp-attach]
aws_iam_policy_attachment.ec2_rp-attach: Creation complete after 2s [id=ec2_rp-attach]
aws_efs_file_system.efs: Creation complete after 6s [id=fs-00a3ec341f88ca116]
aws_efs_access_point.efs_access_point: Creating...
aws_efs_access_point.efs_access_point: Creation complete after 2s [id=fsap-0a9fb739b372f4ac7]
aws_vpc.aws_s23_vpc: Still creating... [10s elapsed]
aws_vpc.aws_s23_vpc: Creation complete after 13s [id=vpc-07f6c8b48e0646592]
aws_subnet.aws_s23_subnet_az[1]: Creating...
aws_internet_gateway.aws_s23-gw: Creating...
aws_subnet.aws_s23_subnet_az[0]: Creating...
aws_security_group.elb-sg: Creating...
aws_internet_gateway.aws_s23-gw: Creation complete after 1s [id=igw-00ca9a6c14493bc22]
aws_route_table.aws_s23-rt: Creating...
aws_security_group.elb-sg: Creation complete after 3s [id=sg-03aa23b5e90265de0]
aws_route_table.aws_s23-rt: Creation complete after 2s [id=rtb-03cc7e8a0aaeaf954]
aws_main_route_table_association.aws_s23-rt-association: Creating...
aws_security_group.web-sg: Creating...
aws_main_route_table_association.aws_s23-rt-association: Creation complete after 1s [id=rtbassoc-06a42e52249471be1]
aws_security_group.web-sg: Creation complete after 3s [id=sg-057e3d1886898a0c2]
aws_security_group.rds-sg: Creating...
aws_security_group.efs-sg: Creating...
aws_security_group.efs-sg: Creation complete after 3s [id=sg-0b7acf614dcb1252e]
aws_security_group.rds-sg: Creation complete after 3s [id=sg-07a616f9d4310f529]
aws_subnet.aws_s23_subnet_az[0]: Still creating... [10s elapsed]
aws_subnet.aws_s23_subnet_az[1]: Still creating... [10s elapsed]
aws_subnet.aws_s23_subnet_az[0]: Creation complete after 12s [id=subnet-07874373f41d4fcd4]
aws_subnet.aws_s23_subnet_az[1]: Creation complete after 12s [id=subnet-084fb45d2ccdd5c6a]
aws_db_subnet_group.rds-subnet: Creating...
aws_lb.web_alb: Creating...
aws_efs_mount_target.efs_mount[1]: Creating...
aws_efs_mount_target.efs_mount[0]: Creating...
aws_db_subnet_group.rds-subnet: Creation complete after 1s [id=rds-subnet]
aws_db_instance.aws_s23-mysql: Creating...
aws_lb.web_alb: Still creating... [10s elapsed]
aws_efs_mount_target.efs_mount[1]: Still creating... [10s elapsed]
aws_efs_mount_target.efs_mount[0]: Still creating... [10s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [10s elapsed]
aws_efs_mount_target.efs_mount[0]: Still creating... [20s elapsed]
aws_lb.web_alb: Still creating... [20s elapsed]
aws_efs_mount_target.efs_mount[1]: Still creating... [20s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [20s elapsed]
aws_lb.web_alb: Still creating... [30s elapsed]
aws_efs_mount_target.efs_mount[0]: Still creating... [30s elapsed]
aws_efs_mount_target.efs_mount[1]: Still creating... [30s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [30s elapsed]
aws_lb.web_alb: Still creating... [40s elapsed]
aws_efs_mount_target.efs_mount[1]: Still creating... [40s elapsed]
aws_efs_mount_target.efs_mount[0]: Still creating... [40s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [40s elapsed]
aws_lb.web_alb: Still creating... [50s elapsed]
aws_efs_mount_target.efs_mount[0]: Still creating... [50s elapsed]
aws_efs_mount_target.efs_mount[1]: Still creating... [50s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [50s elapsed]
aws_efs_mount_target.efs_mount[1]: Still creating... [1m0s elapsed]
aws_efs_mount_target.efs_mount[0]: Still creating... [1m0s elapsed]
aws_lb.web_alb: Still creating... [1m0s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [1m0s elapsed]
aws_efs_mount_target.efs_mount[1]: Still creating... [1m10s elapsed]
aws_lb.web_alb: Still creating... [1m10s elapsed]
aws_efs_mount_target.efs_mount[0]: Still creating... [1m10s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [1m10s elapsed]
aws_lb.web_alb: Still creating... [1m20s elapsed]
aws_efs_mount_target.efs_mount[0]: Still creating... [1m20s elapsed]
aws_efs_mount_target.efs_mount[1]: Still creating... [1m20s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [1m20s elapsed]
aws_efs_mount_target.efs_mount[0]: Creation complete after 1m25s [id=fsmt-02f92918cb572cf53]
aws_efs_mount_target.efs_mount[1]: Creation complete after 1m25s [id=fsmt-01974f0b6b2c176d4]
aws_lb.web_alb: Still creating... [1m30s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [1m30s elapsed]
aws_lb.web_alb: Still creating... [1m40s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [1m40s elapsed]
aws_lb.web_alb: Still creating... [1m50s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [1m50s elapsed]
aws_lb.web_alb: Still creating... [2m0s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [2m0s elapsed]
aws_lb.web_alb: Still creating... [2m10s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [2m10s elapsed]
aws_lb.web_alb: Creation complete after 2m14s [id=arn:aws:elasticloadbalancing:eu-west-2:087693861308:loadbalancer/app/wp-alb/6a65010af386862c]
aws_lb_target_group.web_tg: Creating...
aws_lb_target_group.web_tg: Creation complete after 1s [id=arn:aws:elasticloadbalancing:eu-west-2:087693861308:targetgroup/web-tg/76705ac37fb3e8ed]
aws_lb_listener.web_ls: Creating...
aws_lb_listener.web_ls: Creation complete after 1s [id=arn:aws:elasticloadbalancing:eu-west-2:087693861308:listener/app/wp-alb/6a65010af386862c/c140c2dd15151cd5]
aws_db_instance.aws_s23-mysql: Still creating... [2m20s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [2m30s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [2m40s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [2m50s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [3m0s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [3m10s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [3m20s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [3m30s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [3m40s elapsed]
aws_db_instance.aws_s23-mysql: Still creating... [3m50s elapsed]
aws_db_instance.aws_s23-mysql: Creation complete after 3m58s [id=mysqldb]
data.template_file.wp-template: Reading...
data.template_file.wp-template: Read complete after 0s [id=a53e87e30ad67c5ae5ffa6b57e49b98d3f77d2f4fac471cad7a619422f2434b0]
aws_launch_configuration.web_lc: Creating...
aws_launch_configuration.web_lc: Creation complete after 1s [id=LC-WP]
aws_autoscaling_group.web_asg: Creating...
aws_autoscaling_group.web_asg: Still creating... [10s elapsed]
aws_autoscaling_group.web_asg: Still creating... [30s elapsed]
aws_autoscaling_group.web_asg: Still creating... [40s elapsed]
aws_autoscaling_group.web_asg: Still creating... [50s elapsed]
aws_autoscaling_group.web_asg: Still creating... [1m0s elapsed]
aws_autoscaling_group.web_asg: Still creating... [1m10s elapsed]
aws_autoscaling_group.web_asg: Still creating... [1m20s elapsed]
aws_autoscaling_group.web_asg: Still creating... [1m30s elapsed]
aws_autoscaling_group.web_asg: Still creating... [1m40s elapsed]
aws_autoscaling_group.web_asg: Still creating... [1m50s elapsed]
aws_autoscaling_group.web_asg: Still creating... [2m1s elapsed]
aws_autoscaling_group.web_asg: Still creating... [2m11s elapsed]
aws_autoscaling_group.web_asg: Still creating... [2m21s elapsed]
aws_autoscaling_group.web_asg: Still creating... [2m31s elapsed]
aws_autoscaling_group.web_asg: Still creating... [2m41s elapsed]
aws_autoscaling_group.web_asg: Still creating... [2m51s elapsed]
aws_autoscaling_group.web_asg: Still creating... [3m1s elapsed]
aws_autoscaling_group.web_asg: Still creating... [3m11s elapsed]
aws_autoscaling_group.web_asg: Still creating... [3m21s elapsed]
aws_autoscaling_group.web_asg: Still creating... [3m31s elapsed]
aws_autoscaling_group.web_asg: Still creating... [3m41s elapsed]
aws_autoscaling_group.web_asg: Still creating... [3m51s elapsed]
aws_autoscaling_group.web_asg: Still creating... [4m1s elapsed]
aws_autoscaling_group.web_asg: Still creating... [4m11s elapsed]
aws_autoscaling_group.web_asg: Still creating... [4m21s elapsed]
aws_autoscaling_group.web_asg: Still creating... [4m31s elapsed]
aws_autoscaling_group.web_asg: Still creating... [4m41s elapsed]
aws_autoscaling_group.web_asg: Still creating... [4m51s elapsed]
aws_autoscaling_group.web_asg: Still creating... [5m1s elapsed]
aws_autoscaling_group.web_asg: Still creating... [5m11s elapsed]
aws_autoscaling_group.web_asg: Still creating... [5m21s elapsed]
aws_autoscaling_group.web_asg: Creation complete after 5m25s [id=Wordpress-ASG]
aws_autoscaling_attachment.asg_attachment_elb: Creating...
aws_autoscaling_attachment.asg_attachment_elb: Creation complete after 0s [id=Wordpress-ASG-20220102151103929500000001]

Apply complete! Resources: 36 added, 0 changed, 0 destroyed.

Outputs:

account_id = "087693861308"
db_admin-profile-creds = "semen : wcBMA/+acaZr61BLAQgAda0VASpXP1gSBnHdTjuuL4jGUDPf7CgI/NjuWIHz+dXZw7r4kfK7/A1138yg3sq9xKkrcGl3ErA2qQgD2WF16shyamyGwVx6/EA6vtaLSTH/6jTb05jhnb8HBcHQWveNP2W954NcTZhULjtifmpR/yY5GG8QepYTS0IsnQ3Yl3AwlxZxSxkhfPGqh6nEwSfPAnqremWj0/s5xc8TLQhjXgmKf2lZhhgW+ZuMyvRPaG26bCqdJHprULrYchCcjcYRc+fZPI72UO2UDDjm3uGY9jgKxtGKV3/xfSJchSDj0U3EGe4o47x+cHbHuulrgPyrbEIm9uBu/7N1sKuc0CyIPNLgAeRG8w6QlwXNgs29q6Ww1cVG4V3t4MXgEuEkteAq4vxngxDgSeTyq+x3hAz8eMRalWkLLy4I4C/il/tjMOBN5OH4T2BxTUegPC+go1pmtVjid9Aew+F6+wA="
ec2_admin-profile-creds = "fedor : wcBMA/+acaZr61BLAQgAr3xRPDvCKNJV8vMJAUlP3hfR2n7Dh/34S91TPL+Yv5jwx7MMKAoOYhMu3TDPnJyDn3snzdyV+A0WYqPNZvM0k6LYS6chm4K9MxynIeLk4ktiQcVdsvHKiDTco+PaU0dWkkH+21tpdg2dVjmVmWhlKTWpZRNmLMIOvV02wFBJi8lepdFgd49AK+1hVbOfLi2flMXY7ffh5kTpTkffyJ4iVrUN9NkXoTZT+o7cqpnbYDceGZh5mg0cjj++lOexCSqLo3nWuD9Atks4HNQA/CvyNYLPBkdeihNfgjrj9Jutfav8zUdupmbZ3nVOIABYnjqZg2vwdk2JxHkYsoR2eFH+9dLgAeQLuql+DCfo9IObE1dbb5MX4dzk4OTgnOGbCOBm4ouFudPgUOS7f49l059lmc4toyWlhEsu4H3i0lDmPuAu5BL+6hbsHyzgDbG7Qlo6DeniXXYSx+EM9gA="
efs_dns_name = "fs-00a3ec341f88ca116.efs.eu-west-2.amazonaws.com"
rds_address = "mysqldb.cescrqybicl5.eu-west-2.rds.amazonaws.com"
rds_creds = "dbadmin : ZCSV0uH5aP"
wp_creds = "wpadmin : RSBVbFrBh0"
wp_lb_url = "wp-alb-630828199.eu-west-2.elb.amazonaws.com"